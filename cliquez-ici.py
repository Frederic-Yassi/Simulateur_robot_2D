# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'robotique.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Package.fonctions import *

from pyqtgraph import PlotWidget
import pyqtgraph as pg


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1136, 729)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        MainWindow.setPalette(palette)
        MainWindow.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/robot_4047.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("")
        MainWindow.setTabShape(QtWidgets.QTabWidget.Triangular)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(1, 42, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.centralwidget.setPalette(palette)
        self.centralwidget.setAcceptDrops(True)
        self.centralwidget.setStyleSheet("background-color: #012a4a")
        self.centralwidget.setObjectName("centralwidget")
        self.ButtonDescendant = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonDescendant.setGeometry(QtCore.QRect(1000, 120, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Calligraphy")
        self.ButtonDescendant.setFont(font)
        self.ButtonDescendant.setStyleSheet("background-color: #40916c ;")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/descendingoutlinedarrow_81076.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonDescendant.setIcon(icon1)
        self.ButtonDescendant.setObjectName("ButtonDescendant")
        self.ButtonQuitter = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonQuitter.setGeometry(QtCore.QRect(1020, 460, 91, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 63, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 63, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 63, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 24, 7))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.ButtonQuitter.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Lucida Calligraphy")
        self.ButtonQuitter.setFont(font)
        self.ButtonQuitter.setStyleSheet("background-color: #ff1807 ;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/newPrefix/log_out_icon_128821.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonQuitter.setIcon(icon2)
        self.ButtonQuitter.setObjectName("ButtonQuitter")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(1000, 360, 131, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(1040, 400, 51, 31))
        self.spinBox.setStyleSheet("QSpinBox {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.spinBox.setObjectName("spinBox")
        self.canvas = PlotWidget(self.centralwidget)
        self.canvas.setGeometry(QtCore.QRect(370, 20, 611, 471))
        self.canvas.setStyleSheet("QWidget {\n"
"padding : 2px ;\n"
"border-radius: 5px ;\n"
"background-color: grey ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.canvas.setObjectName("canvas")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(10, 40, 351, 111))
        self.widget_2.setStyleSheet("background-color: #33415c ;\n"
"border-radius : 10px ;")
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayoutWidget_10 = QtWidgets.QWidget(self.widget_2)
        self.horizontalLayoutWidget_10.setGeometry(QtCore.QRect(0, 10, 372, 83))
        self.horizontalLayoutWidget_10.setObjectName("horizontalLayoutWidget_10")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_10)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.bloc1 = QtWidgets.QVBoxLayout()
        self.bloc1.setObjectName("bloc1")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.bloc1.addWidget(self.label)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(50, 6, 50, 6)
        self.horizontalLayout_4.setSpacing(20)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_16 = QtWidgets.QLabel(self.horizontalLayoutWidget_10)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_16.addWidget(self.label_16)
        self.L0 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_10)
        self.L0.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"")
        self.L0.setCursorPosition(0)
        self.L0.setPlaceholderText("")
        self.L0.setClearButtonEnabled(False)
        self.L0.setObjectName("L0")
        self.horizontalLayout_16.addWidget(self.L0)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_15 = QtWidgets.QLabel(self.horizontalLayoutWidget_10)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_15.addWidget(self.label_15)
        self.L1 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_10)
        self.L1.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.L1.setCursorPosition(0)
        self.L1.setPlaceholderText("")
        self.L1.setClearButtonEnabled(False)
        self.L1.setObjectName("L1")
        self.horizontalLayout_15.addWidget(self.L1)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_14 = QtWidgets.QLabel(self.horizontalLayoutWidget_10)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_14.addWidget(self.label_14)
        self.L2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_10)
        self.L2.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"")
        self.L2.setCursorPosition(0)
        self.L2.setPlaceholderText("")
        self.L2.setClearButtonEnabled(False)
        self.L2.setObjectName("L2")
        self.horizontalLayout_14.addWidget(self.L2)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_14)
        self.widget = QtWidgets.QWidget(self.horizontalLayoutWidget_10)
        self.widget.setObjectName("widget")
        self.horizontalLayout_4.addWidget(self.widget)
        self.bloc1.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_10.addLayout(self.bloc1)
        self.widget_5 = QtWidgets.QWidget(self.centralwidget)
        self.widget_5.setGeometry(QtCore.QRect(30, 180, 301, 121))
        self.widget_5.setStyleSheet("background-color: #33415c ;\n"
"border-radius : 10px ;")
        self.widget_5.setObjectName("widget_5")
        self.horizontalLayoutWidget_13 = QtWidgets.QWidget(self.widget_5)
        self.horizontalLayoutWidget_13.setGeometry(QtCore.QRect(20, 10, 264, 91))
        self.horizontalLayoutWidget_13.setObjectName("horizontalLayoutWidget_13")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_13)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.bloc1_3 = QtWidgets.QVBoxLayout()
        self.bloc1_3.setObjectName("bloc1_3")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_13)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.bloc1_3.addWidget(self.label_2)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setContentsMargins(40, 6, 40, 6)
        self.horizontalLayout_8.setSpacing(20)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.label_20 = QtWidgets.QLabel(self.horizontalLayoutWidget_13)
        self.label_20.setObjectName("label_20")
        self.horizontalLayout_23.addWidget(self.label_20)
        self.theta1 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_13)
        self.theta1.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"")
        self.theta1.setCursorPosition(0)
        self.theta1.setPlaceholderText("")
        self.theta1.setClearButtonEnabled(False)
        self.theta1.setObjectName("theta1")
        self.horizontalLayout_23.addWidget(self.theta1)
        self.horizontalLayout_8.addLayout(self.horizontalLayout_23)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.label_21 = QtWidgets.QLabel(self.horizontalLayoutWidget_13)
        self.label_21.setObjectName("label_21")
        self.horizontalLayout_24.addWidget(self.label_21)
        self.theta2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_13)
        self.theta2.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.theta2.setCursorPosition(0)
        self.theta2.setPlaceholderText("")
        self.theta2.setClearButtonEnabled(False)
        self.theta2.setObjectName("theta2")
        self.horizontalLayout_24.addWidget(self.theta2)
        self.horizontalLayout_8.addLayout(self.horizontalLayout_24)
        self.widget_6 = QtWidgets.QWidget(self.horizontalLayoutWidget_13)
        self.widget_6.setObjectName("widget_6")
        self.horizontalLayout_8.addWidget(self.widget_6)
        self.bloc1_3.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_13.addLayout(self.bloc1_3)
        self.widget_7 = QtWidgets.QWidget(self.centralwidget)
        self.widget_7.setGeometry(QtCore.QRect(30, 330, 301, 121))
        self.widget_7.setStyleSheet("background-color: #33415c ;\n"
"border-radius : 10px ;")
        self.widget_7.setObjectName("widget_7")
        self.horizontalLayoutWidget_14 = QtWidgets.QWidget(self.widget_7)
        self.horizontalLayoutWidget_14.setGeometry(QtCore.QRect(20, 10, 264, 91))
        self.horizontalLayoutWidget_14.setObjectName("horizontalLayoutWidget_14")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_14)
        self.horizontalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.bloc1_4 = QtWidgets.QVBoxLayout()
        self.bloc1_4.setObjectName("bloc1_4")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_14)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.bloc1_4.addWidget(self.label_4)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(40, 6, 40, 6)
        self.horizontalLayout_9.setSpacing(20)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.label_22 = QtWidgets.QLabel(self.horizontalLayoutWidget_14)
        self.label_22.setObjectName("label_22")
        self.horizontalLayout_26.addWidget(self.label_22)
        self.Xb = QtWidgets.QLineEdit(self.horizontalLayoutWidget_14)
        self.Xb.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"")
        self.Xb.setCursorPosition(0)
        self.Xb.setPlaceholderText("")
        self.Xb.setClearButtonEnabled(False)
        self.Xb.setObjectName("Xb")
        self.horizontalLayout_26.addWidget(self.Xb)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.label_23 = QtWidgets.QLabel(self.horizontalLayoutWidget_14)
        self.label_23.setObjectName("label_23")
        self.horizontalLayout_27.addWidget(self.label_23)
        self.Yb = QtWidgets.QLineEdit(self.horizontalLayoutWidget_14)
        self.Yb.setStyleSheet("QLineEdit {\n"
"padding : 5px ;\n"
"border-radius: 5px ;\n"
"    background-color: white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.Yb.setCursorPosition(0)
        self.Yb.setPlaceholderText("")
        self.Yb.setClearButtonEnabled(False)
        self.Yb.setObjectName("Yb")
        self.horizontalLayout_27.addWidget(self.Yb)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_27)
        self.widget_8 = QtWidgets.QWidget(self.horizontalLayoutWidget_14)
        self.widget_8.setObjectName("widget_8")
        self.horizontalLayout_9.addWidget(self.widget_8)
        self.bloc1_4.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_25.addLayout(self.bloc1_4)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 511, 1121, 171))
        self.textBrowser.setStyleSheet("QTextBrowser {\n"
"padding : 2px ;\n"
"border-radius: 5px ;\n"
"background-color: white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.textBrowser.setObjectName("textBrowser")
        self.ButtonInitialiser = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonInitialiser.setGeometry(QtCore.QRect(60, 470, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setFamily("Fixedsys")
        self.ButtonInitialiser.setFont(font)
        self.ButtonInitialiser.setMouseTracking(True)
        self.ButtonInitialiser.setAutoFillBackground(False)
        self.ButtonInitialiser.setStyleSheet("QPushButton {\n"
"padding : 2px ;\n"
"border-radius: 5px ;\n"
"    background-color: rgb(0, 0, 0);\n"
"color:white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/javawebstart_java_we_13069.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonInitialiser.setIcon(icon3)
        self.ButtonInitialiser.setCheckable(True)
        self.ButtonInitialiser.setObjectName("ButtonInitialiser")
        self.ButtonReprendre = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonReprendre.setGeometry(QtCore.QRect(1000, 30, 121, 21))
        self.ButtonReprendre.setStyleSheet("background-color: #00a8e8 ;")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/newPrefix/StepForwardNormalBlue_26943.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonReprendre.setIcon(icon4)
        self.ButtonReprendre.setObjectName("ButtonReprendre")
        self.ButtonVider = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonVider.setGeometry(QtCore.QRect(200, 470, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Fixedsys")
        font.setBold(True)
        font.setWeight(75)
        self.ButtonVider.setFont(font)
        self.ButtonVider.setMouseTracking(True)
        self.ButtonVider.setAutoFillBackground(False)
        self.ButtonVider.setStyleSheet("QPushButton {\n"
"padding : 2px ;\n"
"border-radius: 5px ;\n"
"    background-color: rgb(0, 0, 0);\n"
"color:white ;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/newPrefix/actions_edit_clear_15784.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonVider.setIcon(icon5)
        self.ButtonVider.setCheckable(True)
        self.ButtonVider.setObjectName("ButtonVider")
        self.ButtonAscendant = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonAscendant.setGeometry(QtCore.QRect(1000, 160, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Lucida Calligraphy")
        font.setPointSize(8)
        self.ButtonAscendant.setFont(font)
        self.ButtonAscendant.setStyleSheet("background-color: #eb8a90 ;")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/newPrefix/solid-ascendant-arrow-symbol_icon-icons.com_72934.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonAscendant.setIcon(icon6)
        self.ButtonAscendant.setAutoRepeat(True)
        self.ButtonAscendant.setAutoRepeatDelay(3000)
        self.ButtonAscendant.setAutoRepeatInterval(1000)
        self.ButtonAscendant.setObjectName("ButtonAscendant")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(1010, 60, 111, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(1010, 80, 111, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(1010, 230, 111, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.ButtonPrendre = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonPrendre.setGeometry(QtCore.QRect(1030, 270, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonPrendre.setFont(font)
        self.ButtonPrendre.setStyleSheet("background-color: #DBBA4B ;")
        self.ButtonPrendre.setObjectName("ButtonPrendre")
        self.ButtonLacher = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonLacher.setGeometry(QtCore.QRect(1030, 310, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ButtonLacher.setFont(font)
        self.ButtonLacher.setStyleSheet("background-color: #E1CE7A\n"
" ;")
        self.ButtonLacher.setObjectName("ButtonLacher")
        self.ButtonAller = QtWidgets.QPushButton(self.centralwidget)
        self.ButtonAller.setGeometry(QtCore.QRect(990, 200, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Bernard MT Condensed")
        font.setPointSize(11)
        self.ButtonAller.setFont(font)
        self.ButtonAller.setStyleSheet("background-color:  rgb(85, 85, 255);")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/newPrefix/3289563-man-walking-peer-person-person-walking-walking_107110.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ButtonAller.setIcon(icon7)
        self.ButtonAller.setAutoRepeat(True)
        self.ButtonAller.setAutoRepeatDelay(3000)
        self.ButtonAller.setAutoRepeatInterval(1000)
        self.ButtonAller.setObjectName("ButtonAller")
        self.widget_2.raise_()
        self.ButtonDescendant.raise_()
        self.ButtonQuitter.raise_()
        self.label_7.raise_()
        self.spinBox.raise_()
        self.canvas.raise_()
        self.widget_5.raise_()
        self.widget_7.raise_()
        self.textBrowser.raise_()
        self.ButtonInitialiser.raise_()
        self.ButtonReprendre.raise_()
        self.ButtonVider.raise_()
        self.ButtonAscendant.raise_()
        self.label_8.raise_()
        self.label_9.raise_()
        self.label_10.raise_()
        self.ButtonPrendre.raise_()
        self.ButtonLacher.raise_()
        self.ButtonAller.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1136, 21))
        self.menubar.setObjectName("menubar")
        self.menuFichier = QtWidgets.QMenu(self.menubar)
        self.menuFichier.setTearOffEnabled(True)
        self.menuFichier.setSeparatorsCollapsible(True)
        self.menuFichier.setToolTipsVisible(True)
        self.menuFichier.setObjectName("menuFichier")
        self.menuAide = QtWidgets.QMenu(self.menubar)
        self.menuAide.setObjectName("menuAide")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFichier.menuAction())
        self.menubar.addAction(self.menuAide.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #begining of my code   #begining of my code   #begining of my code   #begining of my code   #begining of my code   #begining of my code 
        #begining of my code   #begining of my code   #begining of my code   #begining of my code   #begining of my code   #begining of my code 
        self.ButtonInitialiser.clicked.connect(self.fonctionButtonInitialiser)
        self.ButtonReprendre.clicked.connect(self.fonctionButtonReprendre)
        self.ButtonQuitter.clicked.connect(self.fonctionButtonQuitter)
        self.ButtonDescendant.clicked.connect(self.fonctionButtonDescendant)
        self.ButtonAscendant.clicked.connect(self.fonctionButtonAscendant)
        self.ButtonVider.clicked.connect(self.fonctionButtonVider)
        self.ButtonPrendre.clicked.connect(self.fonctionButtonPrendre)
        self.ButtonAller.clicked.connect(self.fonctionButtonAller)
        self.ButtonLacher.clicked.connect(self.fonctionButtonLacher)

        self.L0.setText("3.5")
        self.L1.setText("3")
        self.L2.setText("3")
        self.theta1.setText("55")
        self.theta2.setText("75")
        self.Yb.setText("1")
        self.Xb.setText("0")
        self.spinBox.setMinimum(1)

        self.canvas.setTitle("Modelisation 2D d'un robot ", color="b", size="10pt")
        self.canvas.setBackground('w')
        self.canvas.showGrid(x=True, y=True)
        self.canvas.setXRange(-1, 8, padding=0)
        self.canvas.setYRange(-0.5, 5.5, padding=0)
        styles = {'color':'k', 'font-size':'20px'}
        self.canvas.setLabel('left', 'X0', **styles)
        self.canvas.setLabel('bottom', 'Y0', **styles)
        self.dataRobot=self.canvas.plot()
        self.dataPivot1=self.canvas.plot()
        self.dataPivot2=self.canvas.plot()
        self.datafleche=self.canvas.plot()
        self.panier=self.canvas.plot()
        self.dataline=self.canvas.plot()
        self.cible=self.canvas.plot()
        self.carre=self.canvas.plot()

        self.liste=[]
        self.position=0
        self.compteur=0
        self.tetefleche=()
        self.sommet=(5.2-0.5,2.3)
        self.PointChute=(6-0.5,2.3)
        self.count=0
        self.place=0
        self.nombre = float(self.spinBox.value())



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ProjetRobotique"))
        self.ButtonDescendant.setText(_translate("MainWindow", "DESCENDANT"))
        self.ButtonQuitter.setText(_translate("MainWindow", "Quitter"))
        self.label_7.setText(_translate("MainWindow", "Nombre de pas"))
        self.label.setText(_translate("MainWindow", "Valeurs de liens"))
        self.label_16.setText(_translate("MainWindow", "L0"))
        self.label_15.setText(_translate("MainWindow", "L1"))
        self.label_14.setText(_translate("MainWindow", "L2"))
        self.label_2.setText(_translate("MainWindow", " Valeurs de θ1 et θ2 "))
        self.label_20.setText(_translate("MainWindow", " θ1"))
        self.label_21.setText(_translate("MainWindow", " θ2"))
        self.label_4.setText(_translate("MainWindow", "Coodonnées de B(x0,y0)"))
        self.label_22.setText(_translate("MainWindow", "Xb"))
        self.label_23.setText(_translate("MainWindow", " Yb"))
        self.ButtonInitialiser.setText(_translate("MainWindow", "Initialiser"))
        self.ButtonReprendre.setText(_translate("MainWindow", "REPRENDRE"))
        self.ButtonVider.setText(_translate("MainWindow", "Vider"))
        self.ButtonAscendant.setText(_translate("MainWindow", "ASCENDANT"))
        self.label_8.setText(_translate("MainWindow", "MOUVEMENT"))
        self.label_9.setText(_translate("MainWindow", "DU ROBOT"))
        self.label_10.setText(_translate("MainWindow", "PINCE"))
        self.ButtonPrendre.setText(_translate("MainWindow", "Prendre"))
        self.ButtonLacher.setText(_translate("MainWindow", "Lacher"))
        self.ButtonAller.setText(_translate("MainWindow", "ALLER AU PANIER"))
        self.menuFichier.setTitle(_translate("MainWindow", "Fichier"))
        self.menuAide.setTitle(_translate("MainWindow", "Aide"))

    def fonctionButtonQuitter(self):
                sys.exit(app.exec_())
 
    def verif_type(self):
        try:
                L1_value=float(self.L1.text())
                L2_value=float(self.L2.text())
                theta1_value=float(self.theta1.text())
                theta2_value=float(self.theta2.text())
                Xb_value=float(self.Xb.text())
                Yb_value=float(self.Yb.text())  
        except :
                self.setcolor("red")
                print("sale")
                return False
        return True

    

    def verif_config(self):
        L0_value=float(self.L0.text())
        L1_value=float(self.L1.text())
        L2_value=float(self.L2.text())
        Xb_value=float(self.Xb.text())
        Yb_value=float(self.Yb.text())

        W=L2_value
        X=Yb_value
        Y=L0_value-Xb_value
        Z1=0
        Z2=-L1_value

        B1=2*(Y*Z1+X*Z2)
        B2=2*(X*Z1-Y*Z2)
        B3=W**2-X**2-Y**2-Z1**2-Z2**2
        
        sou = B1**2 + B2**2 - B3**2
        if sou>=0:
                return True
        else:
                self.setcolor("red")
                return False

    def verif_config_poistion(self,Xb_value,Yb_value):

        L0_value=float(self.L0.text())
        L1_value=float(self.L1.text())
        L2_value=float(self.L2.text())
        
        W=L2_value
        X=Yb_value
        Y=L0_value-Xb_value
        Z1=0
        Z2=-L1_value

        B1=2*(Y*Z1+X*Z2)
        B2=2*(X*Z1-Y*Z2)
        B3=W**2-X**2-Y**2-Z1**2-Z2**2
        
        sou = B1**2 + B2**2 - B3**2
        if sou>=0:
                return True
        else:
                self.textBrowser.setHtml(""" 
                        <h2 style="
                        color:red ; 
                        text-align:center ;
                        display: inline-block;              
                        padding-right: 2em;                   
                        padding-left: 100%;                   
                        white-space: nowrap;                 
                        animation: defilement-rtl 15s infinite linear; "> ERREUR CONFIGURATION IMPOSSIBLE </h2> 
                        """)
                return False
        
                        

    def setcolor(self,color):
        if color=="white":
                self.L0.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "")
                self.L1.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "")
                self.L2.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "")
                self.theta1.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "") 
                self.theta2.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "")
                self.Xb.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "")
                self.Yb.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: white ;\n"
                "}\n"
                "\n"
                "")

        if color=="red":
                self.L0.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "")
                self.L1.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "")
                self.L2.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "")
                self.theta1.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "") 
                self.theta2.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "")
                self.Xb.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "")
                self.Yb.setStyleSheet("QLineEdit {\n"
                "padding : 5px ;\n"
                "border-radius: 5px ;\n"
                "    background-color: red ;\n"
                "}\n"
                "\n"
                "")
        

    def fonctionButtonReprendre(self):
                self.ButtonAscendant.setDisabled(False)
                self.ButtonDescendant.setDisabled(False)

                self.ButtonAller.setDisabled(True)
                self.spinBox.setDisabled(False)
                self.ButtonPrendre.setDisabled(True)
                self.ButtonLacher.setDisabled(True)
                
                self.count=0
                self.place=0    
                self.compteur=0

                self.position=0
                self.panier.setData()

                L0_value=float(self.L0.text())
                L1_value=float(self.L1.text())
                L2_value=float(self.L2.text())
                theta1_value=float(self.theta1.text())
                theta2_value=float(self.theta2.text())
                Xb_value=float(self.Xb.text())
                Yb_value=float(self.Yb.text())  

                T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                
                A_Repere2=[L2_value,0,0]
                O2_Repere1=[L1_value,0,0]

                O1=[L0_value,0,0]
                O2=Cord_otherR(O2_Repere1,T0_1)
                A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
                #robot
                x=[0,O1[0],O2[0][0],A[0][0]]
                y=[0,O1[1],O2[1][0],A[1][0]]
                pen = pg.mkPen(color="b", width=9, style=QtCore.Qt.SolidLine)
                self.dataRobot.setData(y,x,pen=pen)

                #boulespivot

                theta = np.linspace(0, 2*np.pi, 100)

                r = np.sqrt(0.01)
                pen = pg.mkPen(color="k", width=8, style=QtCore.Qt.SolidLine)
                h=[0,self.dataPivot1,self.dataPivot2]
                j=1
                for i in range(1,3) :
                        x1 = r*np.cos(theta)+x[i]
                        x2 = r*np.sin(theta)+y[i]
                        h[j].setData(x2, x1,pen=pen)
                        j+=1

                Z=(x[2],y[2])
                B=(x[3],y[3])

                a=(B[1]-Z[1])/(B[0]-Z[0])
                b=B[1]-B[0]*a

                c=-1/a
                d=B[1]-B[0]*c

                def f(x):
                        return a*x+b

                def g(x):
                        return c*x+d

                #fleche
                s=0.1

                T2=(B[0]-s,f(B[0]-s))
                T1=(B[0]+s,B[1]+s)
                T3=(B[0]-s,B[1]-s)
                

                X=[B[0],T1[0],T2[0],T3[0],B[0]]
                Y=[B[1],T1[1],T2[1],T3[1],B[1]]
                pen = pg.mkPen(color="r", width=9, style=QtCore.Qt.SolidLine)
                self.datafleche.setData(Y,X,pen=pen)

                #ligne
                p=0.5
                pen = pg.mkPen(color="k", width=13, style=QtCore.Qt.SolidLine)
                self.carre.setData([-p,p,p,-p,-p],[0,0,-0.15,-0.15,0],pen=pen)

                pen = pg.mkPen(color="r", width=1, style=QtCore.Qt.DotLine)
                self.dataline.setData([B[1],Yb_value],[B[0],Xb_value],pen=pen)

                #bouleverte
                r = np.sqrt(0.001)
                pen = pg.mkPen(color="g", width=5, style=QtCore.Qt.SolidLine)
                x1 = r*np.cos(theta)+Xb_value
                x2 = r*np.sin(theta)+Yb_value
                self.cible.setData(x2, x1,pen=pen)
                self.textBrowser.setText("")


    def fonctionButtonAller (self):
        if self.place!=(6-1) :
                if self.place!=(6-2) :
                        self.ButtonLacher.setDisabled(False)
                self.count+=1
                self.place+=1     
                
                self.liste=self.get_liste_aller()
                a=self.liste[0]
                b=self.liste[1]
                r=self.det_angle(a[self.place],b[self.place])
                self.representer_angle(r[0],r[1])
                texte1="\tLa pince est à la position ("+str(round(b[self.place],1))+","+str(round(a[self.place],1) )+") ce qui correspond à θ1="+str(round(r[0],2))+"° et θ2="+str(round(r[1],2))+"°"
                self.textBrowser.setText(texte1.center(15))
          



                r = np.sqrt(0.001)
                theta = np.linspace(0, 2*np.pi, 100)
                pen = pg.mkPen(color="g", width=5, style=QtCore.Qt.SolidLine)
                x1 = r*np.cos(theta)+self.tetefleche[0]
                x2 = r*np.sin(theta)+self.tetefleche[1]
                self.cible.setData(x2, x1,pen=pen)
                self.dataline.setData()

    def fonctionButtonDescendant(self):
        self.nombre=float(self.spinBox.text())
        if self.nombre==1 :
                L0_value=float(self.L0.text())
                L1_value=float(self.L1.text())
                L2_value=float(self.L2.text())
                theta1_value=float(self.theta1.text())
                theta2_value=float(self.theta2.text())
                Xb_value=float(self.Xb.text())
                Yb_value=float(self.Yb.text())  

                T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                
                A_Repere2=[L2_value,0,0]

                A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
                x=A[0][0]
                y=A[1][0]
                
                r=self.det_angle(Xb_value,Yb_value)
                self.representer_angle(r[0],r[1])
                self.spinBox.setDisabled(True)
                texte1="\tListe des positions possibles avec ce pas :\n P0("+str(round(y,1))+","+str(round(x,1))+") et P1("+str(Yb_value)+","+str(Xb_value)+")"
                texte2="\tLa pince est à la position P1 ce qui correspond à θ1="+str(round(r[0],2))+"° et θ2="+str(round(r[1],2))+"°"
                self.textBrowser.setText(texte1.center(15))
                self.textBrowser.append(texte2.center(30))
                self.ButtonPrendre.setDisabled(False)
                
        else:        
                if self.position!=(self.nombre) :
                        self.compteur+=1
                        self.position+=1     
                        self.nombre = float(self.spinBox.value())
                
                        L0_value=float(self.L0.text())
                        L1_value=float(self.L1.text())
                        L2_value=float(self.L2.text())
                        theta1_value=float(self.theta1.text())
                        theta2_value=float(self.theta2.text())
                        Xb_value=float(self.Xb.text())
                        Yb_value=float(self.Yb.text())  



                        T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                        T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                        
                        A_Repere2=[L2_value,0,0]

                        A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
                        x=A[0][0]
                        y=A[1][0]
                        self.liste=self.get_liste()
                        a=self.liste[0]
                        b=self.liste[1]
                        r=self.det_angle(a[self.position],b[self.position])
                        self.representer_angle(r[0],r[1])



                        texte1="\t\tListe des positions possibles avec ce pas :\n "
                        for i in range(len(a)):
                                c=round(float(b[i]),1)
                                d=round(float(a[i]),1)
                                z= "P"+str(i)+"("+str(c)+","+str(d)+")  "
                                texte1+=z
                        texte2="\tLa pince est à la position P"+str(self.position)+" ce qui correspond à θ1="+str(round(r[0],2))+"° et θ2="+str(round(r[1],2))+"°"
                        self.textBrowser.setText(texte1.center(15))
                        self.textBrowser.append(texte2.center(30))   

                if self.compteur!=0:
                        self.spinBox.setDisabled(True)
                if self.position==(self.nombre) :
                        self.ButtonPrendre.setDisabled(False)

    def fonctionButtonAscendant(self):
        self.nombre=float(self.spinBox.text())
        if self.nombre==1:
                self.spinBox.setDisabled(False)
                L0_value=float(self.L0.text())
                L1_value=float(self.L1.text())
                L2_value=float(self.L2.text())
                theta1_value=float(self.theta1.text())
                theta2_value=float(self.theta2.text())
                Xb_value=float(self.Xb.text())
                Yb_value=float(self.Yb.text())  

                T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                
                A_Repere2=[L2_value,0,0]

                A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
                x=A[0][0]
                y=A[1][0]
                
                
                r=self.det_angle(x,y)
                self.representer_angle(r[0],r[1])

                texte1="\tListe des positions possibles avec ce pas :\n P0("+str(round(y,1))+","+str(round(x,1))+") et P1("+str(Yb_value)+","+str(Xb_value)+")"
                texte2="\tLa pince est à la position P0 ce qui correspond à θ1="+str(round(r[0],2))+"° et θ2="+str(round(r[1],2))+"°"
                self.textBrowser.setText(texte1.center(15))
                self.textBrowser.append(texte2.center(30))
                self.ButtonPrendre.setDisabled(True)
        else:
                if self.position==0 :
                        
                        L0_value=float(self.L0.text())
                        L1_value=float(self.L1.text())
                        L2_value=float(self.L2.text())
                        theta1_value=float(self.theta1.text())
                        theta2_value=float(self.theta2.text())
                        Xb_value=float(self.Xb.text())
                        Yb_value=float(self.Yb.text())  

                        T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                        T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                        
                        A_Repere2=[L2_value,0,0]

                        A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
                        x=A[0][0]
                        y=A[1][0]

                        self.liste=self.get_liste()
                        a=self.liste[0]
                        b=self.liste[1]
                          
                        r=self.det_angle(x,y)
                        self.representer_angle(r[0],r[1])  
                        texte1="\t\tListe des positions possibles avec ce pas :\n "
                        for i in range(len(a)):
                                c=round(float(b[i]),1)
                                d=round(float(a[i]),1)
                                z= "P"+str(i)+"("+str(c)+","+str(d)+")  "
                                texte1+=z
                        texte2="\tLa pince est à la position P0 ce qui correspond à θ1="+str(round(r[0],2))+"° et θ2="+str(round(r[1],2))+"°"
                        self.textBrowser.setText(texte1.center(15))
                        self.textBrowser.append(texte2.center(30))
                else:
                        self.position-=1
                        self.compteur+=1
                        self.nombre = float(self.spinBox.value())

                        L0_value=float(self.L0.text())
                        L1_value=float(self.L1.text())
                        L2_value=float(self.L2.text())
                        theta1_value=float(self.theta1.text())
                        theta2_value=float(self.theta2.text())
                        Xb_value=float(self.Xb.text())
                        Yb_value=float(self.Yb.text())  

                        T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                        T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                        
                        A_Repere2=[L2_value,0,0]

                        A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
                        x=A[0][0]
                        y=A[1][0]
                        self.liste=self.get_liste()
                        a=self.liste[0]
                        b=self.liste[1]
                        r=self.det_angle(a[self.position],b[self.position])
                        self.representer_angle(r[0],r[1])

                        texte1="\t\tListe des positions possibles avec ce pas :\n "
                        for i in range(len(a)):
                                c=round(float(b[i]),1)
                                d=round(float(a[i]),1)
                                z= "P"+str(i)+"("+str(c)+","+str(d)+")  "
                                texte1+=z
                        texte2="\tLa pince est à la position P"+str(self.position)+" ce qui correspond à θ1="+str(round(r[0],2))+"° et θ2="+str(round(r[1],2))+"°"
                        self.textBrowser.setText(texte1.center(15))
                        self.textBrowser.append(texte2.center(30))   

                if self.position!=(self.nombre) :
                        self.ButtonPrendre.setDisabled(True)   

    def fonctionButtonVider(self) :
        self.L0.clear()
        self.L1.clear()
        self.L2.clear()
        self.theta1.clear()
        self.theta2.clear()
        self.Xb.clear()
        self.Yb.clear()
        self.textBrowser.setText("")



    def fonctionButtonInitialiser(self):
        if (self.verif_type() == True and self.verif_config() == True):
                self.setcolor("green")
                self.setcolor("white")
                self.textBrowser.setHtml(""" 
                <h2 style="
                color:green ; 
                text-align:center ;
                display: inline-block;              
                padding-right: 2em;                   
                padding-left: 100%;                   
                white-space: nowrap;                 
                animation: defilement-rtl 15s infinite linear; "> L'INITIALISATION A ETE EFFECTUE AVEC SUCCES </h2> 
                """)
                font = QtGui.QFont()
                font.setPointSize(18)
                font.setBold(True)
                font.setWeight(75)
                self.textBrowser.setFont(font)
                self.ButtonAscendant.setDisabled(False)
                self.ButtonDescendant.setDisabled(False)

                self.ButtonAller.setDisabled(True)
                self.spinBox.setDisabled(False)
                self.ButtonPrendre.setDisabled(True)
                self.ButtonLacher.setDisabled(True)
                
                self.count=0
                self.place=0    
                self.compteur=0

                self.position=0
                self.panier.setData()

                L0_value=float(self.L0.text())
                L1_value=float(self.L1.text())
                L2_value=float(self.L2.text())
                theta1_value=float(self.theta1.text())
                theta2_value=float(self.theta2.text())
                Xb_value=float(self.Xb.text())
                Yb_value=float(self.Yb.text())  

                T0_1=Mat_Passage(0,1,theta1_value,L0_value)
                T1_2=Mat_Passage(1,2,theta2_value,L1_value)
                
                A_Repere2=[L2_value,0,0]
                O2_Repere1=[L1_value,0,0]

                O1=[L0_value,0,0]
                O2=Cord_otherR(O2_Repere1,T0_1)
                A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))

                #Tracer des liens 

                x=[0,O1[0],O2[0][0],A[0][0]]
                y=[0,O1[1],O2[1][0],A[1][0]]
                pen = pg.mkPen(color="b", width=9, style=QtCore.Qt.SolidLine)
                self.dataRobot.setData(y,x,pen=pen)

                #boules autour des articulations 

                theta = np.linspace(0, 2*np.pi, 100)

                r = np.sqrt(0.01)
                pen = pg.mkPen(color="k", width=8, style=QtCore.Qt.SolidLine)
                h=[0,self.dataPivot1,self.dataPivot2]
                j=1
                for i in range(1,3) :
                        x1 = r*np.cos(theta)+x[i]
                        x2 = r*np.sin(theta)+y[i]
                        h[j].setData(x2, x1,pen=pen)
                        j+=1

                Z=(x[2],y[2])
                B=(x[3],y[3])

                a=(B[1]-Z[1])/(B[0]-Z[0])
                b=B[1]-B[0]*a

                c=-1/a
                d=B[1]-B[0]*c

                def f(x):
                        return a*x+b

                def g(x):
                        return c*x+d

                #pince 
                s=0.1

                T2=(B[0]-s,f(B[0]-s))
                T1=(B[0]+s,B[1]+s)
                T3=(B[0]-s,B[1]-s)
                

                X=[B[0],T1[0],T2[0],T3[0],B[0]]
                Y=[B[1],T1[1],T2[1],T3[1],B[1]]
                pen = pg.mkPen(color="r", width=9, style=QtCore.Qt.SolidLine)
                self.datafleche.setData(Y,X,pen=pen)

                #support rectangulaire
                p=0.5
                pen = pg.mkPen(color="k", width=13, style=QtCore.Qt.SolidLine)
                self.carre.setData([-p,p,p,-p,-p],[0,0,-0.15,-0.15,0],pen=pen)


                #bouleverte au point B
                r = np.sqrt(0.001)
                pen = pg.mkPen(color="g", width=5, style=QtCore.Qt.SolidLine)
                x1 = r*np.cos(theta)+Xb_value
                x2 = r*np.sin(theta)+Yb_value
                self.cible.setData(x2, x1,pen=pen)

                #ligne

                pen = pg.mkPen(color="r", width=2, style=QtCore.Qt.DotLine)
                self.dataline.setData([B[1],Yb_value],[B[0],Xb_value],pen=pen)

               
        else:   

                self.canvas.clear()
                self.dataRobot=self.canvas.plot()
                self.dataPivot1=self.canvas.plot()
                self.dataPivot2=self.canvas.plot()
                self.datafleche=self.canvas.plot()
                self.panier=self.canvas.plot()
                self.dataline=self.canvas.plot()
                self.cible=self.canvas.plot()
                self.carre=self.canvas.plot()
                
                if self.verif_type() == False :
                        self.textBrowser.setHtml(""" 
                        <h2 style="
                        color:red ; 
                        text-align:center ;
                        display: inline-block;              
                        padding-right: 2em;                   
                        padding-left: 100%;                   
                        white-space: nowrap;                 
                        animation: defilement-rtl 15s infinite linear; "> ERREUR DE SAISIE AU NIVEAU DES DONNEES </h2> 
                        """)
                elif self.verif_config() == False :
                         self.textBrowser.setHtml(""" 
                        <h2 style="
                        color:red ; 
                        text-align:center ;
                        display: inline-block;              
                        padding-right: 2em;                   
                        padding-left: 100%;                   
                        white-space: nowrap;                 
                        animation: defilement-rtl 15s infinite linear; "> ERREUR CONFIGURATION IMPOSSIBLE </h2> 
                        """)

    def fonctionButtonLacher(self):
        theta = np.linspace(0, 2*np.pi, 100)
        Xb_value=1.8
        Yb_value=6-0.5
        r = np.sqrt(0.001)
        pen = pg.mkPen(color="g", width=5, style=QtCore.Qt.SolidLine)
        x1 = r*np.cos(theta)+Xb_value
        x2 = r*np.sin(theta)+Yb_value
        self.cible.setData(x2, x1,pen=pen)
        self.textBrowser.append("\tLa pince a laché la boule .")
        

    def fonctionButtonPrendre(self):
        self.count=0
        A=(5.3-0.5,2)
        B=(5.5-0.5,2)
        C=(5.5-0.5,1.7)
        D=(6-0.5,1.7)
        E=(6.5-0.5,1.7)
        F=(6.7-0.5,2)
        G=(6-0.5,0)
        H=(6.5-0.5,2)
        I=(5.5-0.5,0)
        J=(6.5-0.5,0)
        X=[A[0],B[0],C[0],D[0],E[0],H[0],F[0],H[0],E[0],D[0],G[0],I[0],J[0]]
        Y=[A[1],B[1],C[1],D[1],E[1],H[1],F[1],H[1],E[1],D[1],G[1],I[1],J[1]]
        pen = pg.mkPen(width=5, style=QtCore.Qt.SolidLine)
        self.panier.setData(X,Y,pen=pen)   
        #bouleverte
        r = np.sqrt(0.001)
        theta = np.linspace(0, 2*np.pi, 100)
        pen = pg.mkPen(color="g", width=5, style=QtCore.Qt.SolidLine)
        x1 = r*np.cos(theta)+self.tetefleche[0]
        x2 = r*np.sin(theta)+self.tetefleche[1]
        self.cible.setData(x2, x1,pen=pen)
        self.ButtonAller.setDisabled(False)
        self.ButtonPrendre.setDisabled(True)
        self.ButtonAscendant.setDisabled(True)
        self.ButtonDescendant.setDisabled(True)
        self.textBrowser.append("\tLa pince a saisi la boule .")


    def det_angle(self,Xb_value,Yb_value) :
        L0_value=float(self.L0.text())
        L1_value=float(self.L1.text())
        L2_value=float(self.L2.text())

        #recherche de theta 1
        W=L2_value
        X=Yb_value
        Y=L0_value-Xb_value
        Z1=0
        Z2=-L1_value

        B1=2*(Y*Z1+X*Z2)
        B2=2*(X*Z1-Y*Z2)
        B3=W**2-X**2-Y**2-Z1**2-Z2**2
        

        X=B1
        Y=B2
        Z=B3

        if Z==0 :
                theta1=degrees(atan2(-Y,X))
                if Z<0 :
                        theta1+=180

        else : 
                epsilon=1
                sintheta1=(Z*X+epsilon*Y*sqrt(X**2+Y**2-Z**2))/(X**2+Y**2)
                costheta1=(Z*Y-epsilon*X*sqrt(X**2+Y**2-Z**2))/(X**2+Y**2)
                theta1=degrees( atan2(sintheta1,costheta1) )


        #recherche de theta2
        W=L2_value
        X=Yb_value
        Y=L0_value-Xb_value

        Y1=X*cos(radians(theta1))+Y*sin(radians(theta1))+Z1
        Y2=X*sin(radians(theta1))-Y*cos(radians(theta1))+Z2
        X1=W
        X2=W
        theta2=degrees(atan2(Y1/X1,Y2/X2))

        
        return (theta1,theta2)

    def representer_angle(self,theta1_value,theta2_value) :
        
        
        L0_value=float(self.L0.text())
        L1_value=float(self.L1.text())
        L2_value=float(self.L2.text())
        Xb_value=float(self.Xb.text())
        Yb_value=float(self.Yb.text())  

        
        T0_1=Mat_Passage(0,1,theta1_value,L0_value)
        T1_2=Mat_Passage(1,2,theta2_value,L1_value)
        
        A_Repere2=[L2_value,0,0]
        O2_Repere1=[L1_value,0,0]

        O1=[L0_value,0,0]
        O2=Cord_otherR(O2_Repere1,T0_1)
        A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
        #
        x=[0,O1[0],O2[0][0],A[0][0]]
        y=[0,O1[1],O2[1][0],A[1][0]]
        pen = pg.mkPen(color="b", width=9, style=QtCore.Qt.SolidLine)
        self.dataRobot.setData(y,x,pen=pen)

        #

        theta = np.linspace(0, 2*np.pi, 100)

        r = np.sqrt(0.01)
        pen = pg.mkPen(color="k", width=8, style=QtCore.Qt.SolidLine)
        h=[0,self.dataPivot1,self.dataPivot2]
        j=1
        for i in range(1,3) :
                x1 = r*np.cos(theta)+x[i]
                x2 = r*np.sin(theta)+y[i]
                h[j].setData(x2, x1,pen=pen)
                j+=1

        Z=(x[2],y[2])
        B=(x[3],y[3])

        a=(B[1]-Z[1])/(B[0]-Z[0])
        b=B[1]-B[0]*a

        c=-1/a
        d=B[1]-B[0]*c

        def f(x):
                return a*x+b

        def g(x):
                return c*x+d

        #
        s=0.1

        T2=(B[0]-s,f(B[0]-s))
        T1=(B[0]+s,B[1]+s)
        T3=(B[0]-s,B[1]-s)
        self.tetefleche=T2
        X=[B[0],T1[0],T2[0],T3[0],B[0]]
        Y=[B[1],T1[1],T2[1],T3[1],B[1]]
        pen = pg.mkPen(color="r", width=9, style=QtCore.Qt.SolidLine)
        self.datafleche.setData(Y,X,pen=pen)

     
        pen = pg.mkPen(color="r", width=2, style=QtCore.Qt.DotLine)
        self.dataline.setData([B[1],Yb_value],[B[0],Xb_value],pen=pen)

        

    

    def get_liste(self): 
        L0_value=float(self.L0.text())
        L1_value=float(self.L1.text())
        L2_value=float(self.L2.text())
        theta1_value=float(self.theta1.text())
        theta2_value=float(self.theta2.text())
        Xb_value=float(self.Xb.text())
        Yb_value=float(self.Yb.text())  

        T0_1=Mat_Passage(0,1,theta1_value,L0_value)
        T1_2=Mat_Passage(1,2,theta2_value,L1_value)
        
        A_Repere2=[L2_value,0,0]

        A=Cord_otherR(A_Repere2,np.dot(T0_1.value,T1_2.value))
        #
        Xa_value=A[0][0]
        Ya_value=A[1][0]

        a=(Yb_value-Ya_value)/(Xb_value-Xa_value)
        b=Yb_value-a*Xb_value

        self.nombre=float(self.spinBox.text())
        PasX =(Xb_value-Xa_value)/(self.nombre)


        X=[(Xa_value + k*PasX) for k in range(1,(int(self.nombre)+1)) ]
        Y=[(a*x+b) for x in X ]

        X=[Xa_value]+X
        Y=[Ya_value]+Y

        return (X,Y)

    def get_liste_aller(self):
        Xb_value=self.sommet[1]
        Yb_value=self.sommet[0] 
                
        Xa_value=float(self.Xb.text())
        Ya_value=float(self.Yb.text())

        a=(Yb_value-Ya_value)/(Xb_value-Xa_value)
        b=Yb_value-a*Xb_value

        PasX =(Xb_value-Xa_value)/5
        X=[(Xa_value+k*PasX) for k in range(1,5+1)]
        Y=[(a*x+b) for x in X ]
        X.append(self.PointChute[1])
        Y.append(self.PointChute[0])
        return (X,Y)





from pyqtgraph import PlotWidget
import icones


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
